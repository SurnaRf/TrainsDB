@page "/locomotives/create"
@using BusinessLayer;
@using ServiceLayer;
@inject GenericManager<Locomotive, int> locomotiveManager;
@inject GenericManager<Location, int> locationManager;
@inject GenericManager<TrainComposition, int> trainCompositionManager;
@inject NavigationManager navigationManager;

<h3>Create</h3>


<h4>Locomotive</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="OnCreated">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label class="control-label">Nickname</label>
                <input @bind-value="Model.Nickname" class="form-control" />
                <ValidationMessage For="@( () => Model.Nickname )" />
            </div>
            <div class="form-group">
                <label class="control-label">Locomotive Type</label>
                <InputSelect @bind-Value="Model.LocomotiveType" class="form-control">
                    @if (Model.LocomotiveType == null)
                    {
                        <option selected value="">None</option>
                    }
                    @foreach (var lt in Enum.GetValues(typeof(LocomotiveType)))
                    {
                        <option value="@lt">@lt</option>
                    }
                </InputSelect>
                <ValidationMessage For="@( () => Model.LocomotiveType)" />
            </div>
            <div class="form-group">
                <label class="control-label">Carrying capacity</label>
                <input @bind-value="Model.CarryingCapacity" class="form-control" />
                <ValidationMessage For="@( () => Model.CarryingCapacity )" />
            </div>
            <div class="form-group">
                <label class="control-label">Location</label>
                <InputSelect @bind-Value="Model.LocationId" class="form-control">
                    @if (Model.LocationId == 0)
                    {
                        <option selected value="">None</option>
                    }
                    @foreach (var item in Locations)
                    {
                        <option value="@item.Id"> @item.Name </option>
                    }
                </InputSelect>
                <span id="locationErrorLbl" class="text-danger">@locationError</span>
            </div>
            <div class="form-group">
                <label class="control-label">Train composition</label>
                <InputSelect @bind-Value="Model.TrainCompositionId" class="form-control">
                    @if (Model.TrainCompositionId == 0)
                    {
                        <option selected value="">None</option>
                    }
                    @foreach (var item in Compositions)
                    {
                        <option value="@item.Id"> @item.Name </option>
                    }
                </InputSelect>
                <span id="compositionErrorLbl" class="text-danger">@compositionError</span>
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </EditForm>
    </div>
</div>

<div>
    <a href="locomotives">Back to List</a>
</div>

@code
{
    Locomotive Model = new();
    ICollection<Location> Locations = new List<Location>();
    ICollection<TrainComposition> Compositions = new List<TrainComposition>();
    string locationError;
    string compositionError;

    protected override async Task OnInitializedAsync()
    {
        Locations = await locationManager.ReadAllAsync();
        Compositions = await trainCompositionManager.ReadAllAsync();

        Model.Location = new();
        Model.TrainComposition = new();
    }

    private async Task OnCreated()
    {
        if (Model.LocationId == 0)
        {
            locationError = "You must choose a location";
            return;
        }
        else
        {
            locationError = string.Empty;
        }
        if (Model.TrainCompositionId == 0)
        {
            compositionError = "You must choose a train composition";
            return;
        }
        else
        {
            locationError = string.Empty;
        }

        Model.Location = new() { Id = Model.LocationId };
        Model.TrainComposition = new() { Id = (int)Model.TrainCompositionId };

        await locomotiveManager.CreateAsync(Model);
        navigationManager.NavigateTo("locomotives", true);
    }

}
