@page "/connections/edit/{Id:int}"
@using BusinessLayer;
@using BusinessLayer.Terrain;
@using ServiceLayer;
@inject GenericManager<Connection, int> connectionManager;
@inject GenericManager<Location, int> locationAManager;
@inject GenericManager<Location, int> locationBManager;
@inject NavigationManager navigationManager;

<h3>Edit</h3>


<h4>Connection</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="OnUpdated">
            <DataAnnotationsValidator />
            <input type="hidden" @bind-value="Model.Id" />
            <div class="form-group">
                <label class="control-label">Terrain Type</label>
                <InputSelect @bind-Value="Model.TerrainType" class="form-control">
                    @if (Model.TerrainType == null)
                    {
                        <option selected value="">None</option>
                    }
                    @foreach (var c in Enum.GetValues(typeof(TerrainType)))
                    {
                        <option value="@c">@c</option>
                    }
                </InputSelect>
                <ValidationMessage For="@( () => Model.TerrainType)" />
            </div>
            <div class="form-group">
                <label class="control-label">Location A</label>
                <InputSelect @bind-Value="Model.NodeAId" class="form-control">
                    @foreach (var item in NodeAs)
                    {
                        if (item.Id == Model.NodeAId)
                        {
                            <option selected value="@item.Id"> @item.Name </option>
                        }
                        else
                        {
                            <option value="@item.Id"> @item.Name </option>
                        }
                    }
                </InputSelect>
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </EditForm>
    </div>
</div>

<div>
    <a href="connections">Back to List</a>
</div>

@code
{
    Connection Model = new();
    ICollection<Location> NodeAs = new List<Location>();
    ICollection<Location> NodeBs = new List<Location>();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NodeAs = await locationAManager.ReadAllAsync();
        NodeBs = await locationBManager.ReadAllAsync();


        Model = await connectionManager.ReadAsync(Id, true, false);
    }

    private async Task OnUpdated()
    {
        await connectionManager.UpdateAsync(Model, true);
        navigationManager.NavigateTo("connections");
    }

}
